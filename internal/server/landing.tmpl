{{/* Embedded template for the Guildmaster landing page. */}}
<!doctype html>
<html>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Guildmaster — Scores</title>
    <style>
      :root { --bg:#0b1020; --card:#11162a; --fg:#e7e7ea; --muted:#8a8fa3; --accent:#67e8f9; --line:rgba(255,255,255,.06); }
      * { box-sizing: border-box; }
      body { font-family: system-ui, -apple-system, Segoe UI, Roboto, sans-serif; padding: 2rem; background: var(--bg); color: var(--fg); }
      .container { max-width: 1000px; margin: 0 auto; }
      h1 { margin: 0 0 .25rem; }
      .subtitle { margin: 0 0 1rem; color: var(--muted); }
      .actions { margin: 0 0 1rem; display: flex; gap: .5rem; align-items: center; }
      .spacer { flex: 1; }
      button { background: var(--accent); color: #042026; border: none; padding: .5rem .75rem; border-radius: .5rem; font-weight: 600; cursor: pointer; }
      button:disabled { opacity: .6; cursor: wait; }
      section { background: var(--card); padding: 1rem; border-radius: .75rem; box-shadow: 0 8px 30px rgba(0,0,0,.2); margin-bottom: 1rem; }
      table { border-collapse: collapse; width: 100%; margin: .5rem 0 0; }
      th, td { text-align: left; padding: .5rem .75rem; border-bottom: 1px solid var(--line); }
      thead th { position: sticky; top: 0; background: var(--card); z-index: 1; }
      tbody tr:nth-child(odd) { background: rgba(255,255,255,.02); }
      tbody tr:hover { background: rgba(255,255,255,.05); }
      .scores { max-width: 720px; margin-bottom: 1rem; }
      .score { text-align: right; font-variant-numeric: tabular-nums; }
      .muted { color: var(--muted); }
      .filter { background: transparent; color: var(--fg); border: 1px solid var(--line); padding: .5rem .75rem; border-radius: .5rem; }
      .rank { width: 3.5rem; }
      .player { width: auto; }
      .score-col { width: 7rem; }
    </style>
  </head>
  <body>
    <div class="container">
      <h1>Guildmaster</h1>
      <p class="subtitle">{{ .PlayerCount }} players ranked — latest snapshot from Sheets.</p>
      <div class="actions">
        <input id="filter" class="filter" placeholder="Filter players…" aria-label="Filter players"/>
        <div class="spacer"></div>
        <button id="refreshBtn" title="Fetch latest games and recompute scores">Refresh Scores</button>
      </div>

      <section class="scores">
        <h2>Scoreboard</h2>
        <table id="scoreboard">
          <thead>
            <tr><th class="rank">#</th><th class="player">Player</th><th class="score score-col">Score</th></tr>
          </thead>
          <tbody>
          {{- range $i, $row := .Ranked }}
            <tr>
              <td class="rank">{{ medal $i }}{{ if eq (medal $i) "" }}{{ add1 $i }}{{ end }}</td>
              <td class="player">{{ $row.Name }}</td>
              <td class="score">{{ $row.Score }}</td>
            </tr>
          {{- end }}
          </tbody>
        </table>
      </section>

      <section class="games">
        <h2>Recent Games (Latest 10)</h2>
        <table>
          <thead><tr><th>Date</th><th>Players</th></tr></thead>
          <tbody>
          {{- range .Games }}
            <tr>
              <td>{{ .Date }}</td>
              <td>{{ range $i, $p := .Rankings }}{{ if $i }}, {{ end }}{{ $p }}{{ end }}</td>
            </tr>
          {{- end }}
          </tbody>
        </table>
      </section>

      <p class="muted"><small>Data last refreshed when this page was rendered on the server.</small></p>
    </div>

    <script>
      const btn = document.getElementById('refreshBtn');
      if (btn) {
        btn.addEventListener('click', async () => {
          try {
            btn.disabled = true;
            const res = await fetch('/api/refresh', { method: 'POST' });
            if (!res.ok) throw new Error('Refresh failed');
            location.reload();
          } catch (e) {
            alert('Failed to refresh scores');
          } finally {
            btn.disabled = false;
          }
        });
      }

      // simple client-side filter
      const filter = document.getElementById('filter');
      const table = document.getElementById('scoreboard');
      if (filter && table) {
        filter.addEventListener('input', () => {
          const q = filter.value.toLowerCase().trim();
          const rows = table.querySelectorAll('tbody tr');
          rows.forEach(row => {
            const name = row.querySelector('.player')?.textContent?.toLowerCase() || '';
            row.style.display = q && !name.includes(q) ? 'none' : '';
          });
        });
      }
    </script>
  </body>
</html>
